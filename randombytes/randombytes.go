package randombytes

// #cgo pkg-config: libsodium ../native/lib/pkgconfig/libsodium.pc
// #include "../native/include/sodium.h"
// #include <stdlib.h>
import "C"
import "github.com/tux3/libsodium-go/support"
import "unsafe"

// RandomBytesSeedBytes returns the number of bytes required
// for seeding RandomBytesBufDeterministic.
func RandomBytesSeedBytes() int {
	return int(C.randombytes_seedbytes())
}

// RandomBytes returns a specified number of random bytes.
// It is essentially a wrapper around RandomBytesBuf for convenience.
// Note that this behaviour is different than in NaCl and libsodium,
// where this function behaves the same as RandomBytesBuf.
func RandomBytes(size int) []byte {
	buf := make([]byte, size)
	RandomBytesBuf(buf)
	return buf
}

// RandomBytesBuf fills a buffer with random bytes.
func RandomBytesBuf(buf []byte) {
	if len(buf) > 0 {
		C.randombytes_buf(unsafe.Pointer(&buf[0]), C.size_t(len(buf)))
	}
}

// RandomBytesBufDeterministic fills a buffer with bytes that are
// indistinguishable from random bytes without knowing seed.
func RandomBytesBufDeterministic(buf []byte, seed []byte) {
	support.CheckSize(seed, RandomBytesSeedBytes(), "seed")
	if len(buf) > 0 {
		C.randombytes_buf_deterministic(
			unsafe.Pointer(&buf[0]),
			C.size_t(len(buf)),
			(*C.uchar)(&seed[0]))
	}
}

// RandomBytesRandom returns a random 32 bit unsigned integer.
func RandomBytesRandom() uint32 {
	return uint32(C.randombytes_random())
}

// RandomBytesUniform returns a random number between 0 and an upper bound.
// The generated bytes have a uniform distribution between 0 and the upper bound.
func RandomBytesUniform(upperBound uint32) uint32 {
	return uint32(C.randombytes_uniform(C.uint32_t(upperBound)))
}

// RandomBytesStir reseeds the random number generator.
func RandomBytesStir() {
	C.randombytes_stir()
}

// RandomBytesClose deallocates the resources used by the random number generator.
func RandomBytesClose() {
	C.randombytes_close()
}

// RandomBytesSetImplementation sets the implementation of the random number generator.
func RandomBytesSetImplementation(impl *C.struct_randombytes_implementation) int {
	return int(C.randombytes_set_implementation(impl))
}

// RandomBytesImplementationName returns the name of the random number
// generator that is being used.
func RandomBytesImplementationName() string {
	return C.GoString(C.randombytes_implementation_name())
}

// RandomBytesSalsa20Implementation contains a pointer to C.randombytes_salsa20_implementation
// This means that it can be used as an argument to RandomBytesSetImplementation
var RandomBytesSalsa20Implementation *C.struct_randombytes_implementation = &C.randombytes_salsa20_implementation

// RandomBytesSysRandomImplementation contains a pointer to C.randombytes_sysrandom_implementation
// This means that it can be used as an argument to RandomBytesSetImplementation
var RandomBytesSysRandomImplementation *C.struct_randombytes_implementation = &C.randombytes_sysrandom_implementation
